---
title: .NET Core Buildpack
owner: Buildpacks
---

<strong><%= modified_date %></strong>

This topic describes how to push Cloud Foundry apps to Linux cells using the .NET Core buildpack. You can find supported ASP.NET Core versions 
in the [.NET Core buildpack release notes](https://github.com/cloudfoundry/dotnet-core-buildpack/releases).

<p class='note'><strong>Note:</strong> The .NET Core buildpack can only be used to deploy apps to Linux cells. To deploy .NET Core apps to Windows cells, use the [Binary buildpack] (https://docs.pivotal.io/pivotalcf/2-4/buildpacks/binary/index.html).</p>

## <a id='overview'></a> Overview
Buildpacks provide needed dependencies to <%= vars.product_windows_full %> apps. <%= vars.product_windows %> automatically uses the .NET Core buildpack when one or more of the following conditions are met:

- The pushed app contains one or more `*.csproj` or `*.fsproj` files.
- The app is pushed from the output directory of the `dotnet publish` command.

For information about deploying different types of .NET apps, follow the links in the table below.

<table>
  <tr>
    <th>Type of .NET App</th>
    <th>Buildpack</th>
  </tr>
  <tr>
    <td>
        ASP.NET MVC<br>
        ASP.NET Web Forms<br>
        ASP.NET WebAPI Apps<br>
        Windows Communication Foundation (WCF)
    </td>
    <td><a href="../hwc/index.html">HWC</a></td>
  </tr>
  <tr>
    <td>.NET Console</td>
    <td><a href="../binary/index.html">Binary</a></td>
  </tr>
  <tr>
    <td>.NET Core pushed to Linux stack</td>
    <td><a href="../dotnet-core/index.html">.NET Core</a></td>
  </tr>
  <tr>
    <td>.NET Core pushed to Windows stack</td>
    <td><a href="../binary/index.html">Binary</a></td>
  </tr>
</table>

## <a id='pushing-apps'></a> Push a .NET Core App to Linux ##

Follow the steps below to push your app.

1. To push your app, run the following command:

    ```shell
    cf push APP-NAME
    ```
    Where `APP-NAME` is the name you want to give your app.  
<br>
    For example:

    <pre class='terminal'>
    $ cf push my-app
    Creating app my-app in org sample-org / space sample-space as username@example.com...
    OK
    ...
    requested state: started
    instances: 1/1
    usage: 1GB x 1 instances
    urls: my-app.example.com
    </pre>
<br>
    If your <%= vars.product_windows %> deployment does not have the .NET Core buildpack installed or the installed version is out of date, 
    run the push command with the `-b` option to specify buildpack:

    ```shell
    cf push APP-NAME -b https://github.com/cloudfoundry/dotnet-core-buildpack.git
    ```

    Where `APP-NAME` is the name you want to give your app.  

1. Find the URL of your app in the push command output. In the example above, `my-app.example.com` is the URL of the app. 
1. Open a browser and navigate to the URL to see your app running.  

For a basic example app, see [ASP.NET Core getting started app](https://github.com/IBM-Bluemix/aspnet-core-helloworld) in GitHub.

## <a id='source-based'></a>Source-Based, Non-Published Deployments

For a source-based, non-published deployment, you push your app's source code, not the output directory of the `dotnet publish` command. 

The source-based, non-published workflow ensures the buildpack can keep all your dependencies in sync and up to date.
For additional information about using source-based, non-published deployments, see the following sections:

* [Deploy Apps with Multiple Projects](#multiple-projects)
* [Use Non-Default Package Sources](#non-default-package-sources)
* [Disable and Clear Your NuGet Package Cache](#disabling-nuget)

<p class='note'><strong>Note:</strong> The source-based deployment workflow also uses the <code>cf push</code> command to push source-based apps to Cloud Foundry.</p>

### <a id='multiple-projects'></a>Deploy Apps with Multiple Projects

If you are deploying an app containing multiple projects, you must specify which of the app's projects is the main project. 

To specify the main project in a multi-project deployment perform the following steps:  

1. Create a `.deployment` file in your app's root folder and open the new file in a text editor.
1. Designate the main project's path by configuring the file, using the following format:

    ```text
    [config]
    project = PATH-TO-YOUR-MAIN-PROJECT
    ```

    Where `PATH-TO-YOUR-MAIN-PROJECT` is the location of your main project's `*.csproj` or `*.fsproj` file.  
<br>
    For example: 

    ```text
    [config]
    project = src/MyApp.Web/MyApp.Web.csproj
    ```

    In this example, by pointing to the `MyApp.Web` `*.csproj` file, `MyApp.Web` is configured as the main project.

1. Save the revised `.deployment` file.

When deployed, the buildpack attempts to execute the main project using the `dotnet run` command, `dotnet run -p PATH-TO-YOUR-MAIN-PROJECT`, 
and automatically compiles all projects listed as dependencies in the main project's `*.csproj` or `*.fsproj` file.  
<br>
For example: Suppose your `.deployment` file is configured as above and you have an app `src` folder containing three projects: 
`MyApp.Web`, `MyApp.DAL` and `MyApp.Services`. If your `MyApp.Web.csproj` file lists the `MyApp.DAL` and `MyApp.Services` projects as dependencies, 
the two additional projects will be compiled by the buildpack.

### <a id='non-default-package-sources'></a>Use Non-Default Package Sources

If you want to deploy an app that uses non-default package sources,
you must specify those package sources in the `NuGet.Config` file.
For information about `NuGet.Config`,
see [nuget.config reference](https://docs.microsoft.com/en-us/nuget/reference/nuget-config-file)
in the Microsoft documentation.

### <a id='disabling-nuget'></a>Disable and Clear Your NuGet Package Cache

You may need to disable NuGet package caching or clear NuGet packages cached in the staging environment
in one of the following scenarios:

* Your app fails to stage because it runs out of space, exceeding the maximum allowable disk quota.
* You have added pre-release packages to test a new feature and then decided to revert back to the main NuGet feed.
You may need to remove the packages you changed from the cache to avoid conflicts.

Disabling NuGet caching clears any existing NuGet dependencies from the staging cache
and prevents the buildpack from adding NuGet dependencies to the staging cache.

NuGet package caching is disabled by default. If the default is not explicitly overridden, no additional NuGet caching configuration is required.

To disable NuGet package caching, do the following:

1. Confirm the `CACHE_NUGET_PACKAGES` environment variable is not set to `true` in your app manifest by locating the `manifest.yml` file and confirming `CACHE_NUGET_PACKAGES` is not set to true.
1. If needed, set `CACHE_NUGET_PACKAGES` to `false` in the `manifest.yml` file by setting the `CACHE_NUGET_PACKAGES` environment variable to `false`.  
<br>
    For example:

    ```yml
    ---
    applications:
    - name: sample-aspnetcore-app
      memory: 512M
      env:
        CACHE_NUGET_PACKAGES: false
    ```

1. To alternatively configure the setting to false in the environment variables settings, run the following on the command line:

    ```shell
    cf set-env APP-NAME CACHE_NUGET_PACKAGES false
    ```

    Where `APP-NAME` is the name of your app.

For more information, see the [Environment Variables](../../devguide/deploy-apps/manifest.html#env-block) section
of the <em>Deploying with Application Manifests</em> topic.

## <a id='framework-dependent'></a>Framework-Dependent Deployments##

For a framework-dependent deployment (FDD), you deploy only your app and third-party dependencies.
Cloud Foundry recommends using this workflow if you deploy an app in an offline setting.
For information about deploying FDDs, see
[Framework-dependent deployments (FDD)](https://docs.microsoft.com/en-us/dotnet/core/deploying/index#framework-dependent-deployments-fdd)
in the Microsoft documentation.

To deploy an FDD using the buildpack, do the following:

1. Publish the app by running the `dotnet publish` command:

    <pre>dotnet publish [-f FRAMEWORK-NAME] [-c Release]</pre>

    Where `FRAMEWORK-NAME` is your target framework.

1. Prepare to push your app by doing one of the following:
    * If your app uses a `manifest.yml`, specify a path to the output folder of `dotnet publish`. 
This allows you to push your app from any directory.
    * If not, navigate to the `bin/Debug|Release/YOUR-FRAMEWORK/YOUR-RUNTIME/publish` directory.

1. Push your app.

## <a id='self-contained'></a>Self-Contained Deployments##

For a self-contained deployment (SCD), you deploy your app, third-party dependencies,
and the version of .NET Core that you used to build your app. For information about SCDs,
see [Self-contained deployments (SCD)](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd)
in the Microsoft documentation.

<p class="note"><strong>Note:</strong> Cloud Foundry does not recommend using the SCD workflow.
The buildpack is unable to keep dependencies in sync and up to date for workflows that deploy a pre-published binary.</p>

When using the SCD workflow for deploying your app, you must do the following:  

* Specify a runtime in the `dotnet publish` command. For example:

    <pre class='terminal'>
    $ dotnet publish -r ubuntu14.04-x64
    </pre>

* Include the specified runtime in the `RuntimeIdentifiers` section of the project file.

## <a id='dotnet-sdk'></a> Specify .NET Core SDKs

To pin the .NET Core SDK to a specific version or version line, create a `buildpack.yml` file at the app root
and add your SDK version in one of the following formats:

```yml
dotnet-core:
  sdk: 2.1.201
```

```yml
dotnet-core:
  sdk: 2.1.x
```

```yml
dotnet-core:
  sdk: 2.x
```

The buildpack chooses what SDK to install based on the files present at the app root in the following order of precedence:

1. `buildpack.yml`
1. `global.json`
1. `*.fsproj`

<p class="note"><strong>Note</strong>: The app respects the SDK version specified in <code>global.json</code> at runtime.
If you provide versions in both <code>global.json</code> and <code>buildpack.yml</code> files,
ensure you specify the same versions in both files.</p>

## <a id='dotnet-runtime'></a>Specify .NET Runtime Versions

This section explains how to specify a .NET Runtime version for source-based and framework-dependent apps.

### <a id='dotnet-runtime-source-based'></a>Source-Based Apps

If you want to lock the .NET Runtime version, configure your `.csproj` or `.fsproj` file to lock your app to the desired version.  

For example, the following configuration locks the runtime to 2.1:

```xml
<PropertyGroup>
  <TargetFramework>netcoreapp2.1</TargetFramework>
  <RuntimeFrameworkVersion>2.1.*</RuntimeFrameworkVersion>
</PropertyGroup>
```

<p class="note"><strong>Note:</strong> For source-based apps, specify a minor version of the .NET Runtime.
Do not specify a patch version because
buildpacks contain only the two most recent patch versions of each minor version.</p>

### <a id='dotnet-runtime-fdd'></a>Framework-Dependent Apps

Your app is configured to use the latest .NET Runtime patch version by default.  

If you want your app to maintain a specific .NET Runtime version, you must modify your app's `.runtimeconfig.json` file 
to include the `applyPatches` property and set the property to `false`. 

For example:

```json
{
  "runtimeOptions": {
    "tfm": "netcoreapp2.0",
    "framework": {
      "name": "Microsoft.NETCore.App",
      "version": "2.0.0"
    },
    "applyPatches": false
  }
}
```

<p class="note"><strong>Note:</strong> Set <code>applyPatches: false</code> in  <code>*.runtimeconfig.json</code> only if you want
to pin your .NET Framework to a specific version. This prevents your app
from receiving updates to the runtime version and assemblies.</p>

## <a id='offline'></a> Push an App in a Disconnected Environment

For offline environments, Cloud Foundry recommends using the Framework-Dependent Deployment workflow. 
This workflow enables the deployed app to use the latest runtime provided by the offline buildpack. 
For more information, see: [Framework-Dependent Deployments](#framework-dependent).

## <a id='runtime-store'></a>Maintain ASP.NET Core Assemblies

<p class="note"><strong>Note:</strong> This section applies only to source-based and framework-dependent deployments.</p>

For maintaining ASP.NET Core assemblies, it is recommended you do one of the following

* Configure your app as a fully vendored app requiring fewer buildpack updates. Modify your `.csproj` file with the following:

    ```xml
    <PropertyGroup>
      <PublishWithAspNetCoreTargetManifest>false</PublishWithAspNetCoreTargetManifest>
    </PropertyGroup>
    ```

* Keep your SDK up to date, by setting `buildpack.yml` to the .NET SDK line you want to use.  For example:

    ```yml
    ---
    dotnet-core:
    	sdk: 2.0.x
    ```

<p class="note"><strong>Note:</strong> <code>2.0.x</code> ASP.NET Core assemblies are released
in the <code>2.1.200</code>-<code>2.1.299</code> SDK versions,
and <code>2.1.x</code> assemblies are released in the <code>2.1.300</code> and above SDK versions.</p>

## <a id='port'></a>Configure the Listen Port ##

<%= vars.product_windows %> sets the `$PORT` environment variable automatically. 
For your .NET Core app to work on <%= vars.product_windows %>,
you must configure the app to listen on the environment's specified port.  

For C# apps, the following modifications allow the buildpack to pass the correct port from `$PORT` environment variable 
to the app when running the initial startup command:

1. Open the file that contains your `Main` method.

1. Add a `using` statement to the top of the file:

    ```c#
    using Microsoft.Extensions.Configuration;
    ```

1. Add the following lines before the line `var host = new WebHostBuilder()`:

    ```c#
    var config = new ConfigurationBuilder()
        .AddCommandLine(args)
        .Build();
    ```
1. Add the following line after `.UseKestrel()`:

    ```c#
    .UseConfiguration(config)
    ```

    The `Main` method should now resemble the following example:

    ```c#
    public static void Main(string[] args)
    {
        var config = new ConfigurationBuilder()
            .AddCommandLine(args)
            .Build();
        var host = new WebHostBuilder()
            .UseKestrel()
            .UseConfiguration(config)
            .UseContentRoot(Directory.GetCurrentDirectory())
            .UseStartup&lt;Startup&gt;()
            .Build();
        host.Run();
    }
    ```

1. Save your changes.

1. Add `Microsoft.Extensions.Configuration.CommandLine` as a dependency in `*.csproj`:

    ```xml
    <PackageReference Include="Microsoft.Extensions.Configuration.CommandLine">
      <Version>VERSION</Version>
    </PackageReference>
    ```

    Where `VERSION` is the version of the package to use. 
    To find a list of valid versions, navigate to https://www.nuget.org.

1. If your app requires any other files at runtime, such as JSON configuration files, add them to the `include` section of `copyToOutput`.

1. Save your changes.

With these changes, the `dotnet run` command copies your app `Views` to the build output where the .NET CLI can find them.

## <a id='custom-libraries'></a>Add Custom Libraries

If your app requires external shared libraries that are not provided by the rootfs or the buildpack, you must place the libraries in an `ld_library_path` directory at the app root.

<p class="note"><strong>Note</strong>: You must keep these libraries up to date. They do not update automatically.</p>

The .NET Core buildpack automatically adds the directory `<app-root>/ld_library_path` to `LD_LIBRARY_PATH` so that your app can access these libraries at runtime.
