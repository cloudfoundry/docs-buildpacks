---
title: Go Buildpack
owner: Buildpacks
---

<strong><%= modified_date %></strong>

## <a id='buildpack'></a>Usage ##

This buildpack will be automatically detected for a Go application, or you request the buildpack with

```bash
cf push my_app -b go_buildpack
```


If your Cloud Foundry deployment does not have the Go Buildpack installed, or the installed version is out of date, you can use the latest version with the command:

```bash
cf push my_app -b https://github.com/cloudfoundry/go-buildpack.git
```

Your app must specify a start command. The start command can be placed in the file `Procfile` in your app's root directory. For example, if your Go app's package name is `my-go-server`, the following `Procfile` would provide the correct start command:

```
web: my-go-server
```

You can also specify your app's start command in the `manifest.yml` file in the root directory, for example:

```yaml
---
applications:
  - name: my-app-name
    command: my-go-server
```

### <a id='detection'></a>Detection ###

The Go buildpack will be automatically detected if your app has been packaged
with [godep](https://github.com/tools/godep) using `godep save`. It will also be
automatically detected if your app has a `vendor/` directory and your app has
any files ending with `.go`.


### Fixing a Go Version

If a version of Go is unspecified, the Go buildpack will default to the most recent version of Go it has available.

If you are using godep, you can fix your Go version in  `GoVersion` key of the `Godeps/Godeps.json` file.

If you are using the `vendor/` directory for dependencies, you can set the Go version with the `GOVERSION` environment variable. For example, a `manifest.yml` to request the most recent Go 1.5:

```yaml
---
applications:
  - name: my-app-name
    env:
      GOVERSION: go1.5
      GOPACKAGENAME: app-package-name
      GO15VENDOREXPERIMENT: 1
```

If you are fixing a Go version, make sure it is supported by the Go buildpack. You can see a list of supported versions in the [release notes](https://github.com/cloudfoundry/go-buildpack/releases).

### <a id='debugging_fixed_version'></a> Debugging ###

If you try to use a binary that is not currently supported, staging your app will fail and you will see the following error message:

```
       Could not get translated url, exited with: DEPENDENCY_MISSING_IN_MANIFEST: ...
 !
 !     exit
 !
Staging failed: Buildpack compilation step failed
```


## <a id='dependency_management'></a>Dependency management ##

Please note that this buildpack only supports the [godep](https://github.com/tools/godep) package manager if you are not packaging your dependencies in the `vendor/` directory.

However, as long as your package manager supports the new Go standard and places dependencies correctly into `vendor/`, your app should stage if you follow the instructions below.

### <a id='vendoring'></a>Vendoring with godep ###

If you are using [godep](https://github.com/tools/godep) to package your dependencies, make sure that you have created a valid `Godeps/Godeps.json` file in the root directory of your app by running `godep save`.

For further help, please see these fixture apps for examples of valid go applications you can deploy:

* [go app](https://github.com/cloudfoundry/go-buildpack/tree/master/cf_spec/fixtures/go_app/src/go_app)
* [go app with dependencies](https://github.com/cloudfoundry/go-buildpack/tree/master/cf_spec/fixtures/go_app_with_dependencies/src/go_app_with_dependencies)


**NOTE**: if you are using godep with Go 1.6, you must set the `GO15VENDOREXPERIMENT` environment variable to 0, otherwise your app will not stage.

### <a id='native_vendoring'></a> Go native vendoring ###

If you are using the native Go vendoring system, which packages all local dependencies in the `vendor/` directory, you must specify your app's package name in the `GOPACKAGENAME` environment variable. An example `manifest.yml`:

```yaml
---
applications:
 - name: my-app-name
   command: example-project
   env:
     GOPACKAGENAME: github.com/example-org/example-project
```

**NOTE**: For Go 1.5, since native vendoring is turned off by default, you must set the environment variable `GO15VENDOREXPERIMENT` to 1 in your `manifest.yml` to use this feature.

For further help, please see this [fixture app](https://github.com/cloudfoundry/go-buildpack/tree/develop/cf_spec/fixtures/go_with_native_vendoring/src/go_app).

### <a id='c_dependencies'></a>C dependencies ###

This buildpack supports building with C dependencies via
[cgo](https://golang.org/cmd/cgo/). You can set config vars to specify CGO flags
to, e.g., specify paths for vendored dependencies. E.g., to build
[gopgsqldriver](https://github.com/jbarham/gopgsqldriver), add the config var
`CGO_CFLAGS` with the value `-I/app/code/vendor/include/postgresql` and include
the relevant Postgres header files in `vendor/include/postgresql/` in your app.

## <a id='disconnected'></a> Disconnected environments ##
To use this buildpack on Cloud Foundry, where the Cloud Foundry instance limits some or all internet activity, please read the [Disconnected Environments documentation](https://github.com/cf-buildpacks/buildpack-packager/blob/master/doc/disconnected_environments.md).

### <a id='vendoring_app_dependencies'></a> Vendoring app dependencies ###
As stated in the [Disconnected Environments documentation](https://github.com/cf-buildpacks/buildpack-packager/blob/master/doc/disconnected_environments.md), your application must vendor its dependencies locally.

As described in the "Dependency Management" section, you can use [Godep](https://github.com/tools/godep) or the Go vendoring system using the `vendor/` directory.

```cf push``` uploads your vendored dependencies. The buildpack will compile any dependencies requiring compilation while staging your application.

## <a id='proxy_support'></a> Proxy Support ##

If you need to use a proxy to download dependencies during staging, you can set
the `http_proxy` and/or `https_proxy` environment variables. For more information, see
the [Proxy Usage Docs](http://docs.cloudfoundry.org/buildpacks/proxy-usage.html).

## Help and Support

Join the #buildpacks channel in our [Slack community] (http://slack.cloudfoundry.org/) if you need any further assistance.

For more information about using and extending the Go buildpack in Cloud Foundry, see
the [go-buildpack GitHub repo](https://github.com/cloudfoundry/go-buildpack).

You can find current information about this buildpack on the Go buildpack
[release page](https://github.com/cloudfoundry/go-buildpack/releases) in GitHub.

