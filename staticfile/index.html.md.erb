---
title: Staticfile Buildpack
owner: Buildpacks
---



## <a id='overview'></a> Overview

This topic describes how to configure and use the Staticfile buildpack.

<p class="note"><strong>Note</strong>: <a href="http://bosh.io/docs/trusted-certs.html">BOSH configured custom trusted certificates</a> are not supported by the Staticfile buildpack.</p>

### <a id='definitions'></a>Definitions

**Staticfile app**: An app or content that requires no backend code other than the NGINX webserver, which the buildpack provides.
Examples of staticfile apps are front-end JavaScript apps, static HTML content, and HTML/JavaScript forms.

**Staticfile buildpack**: The buildpack that provides runtime support for staticfile apps and apps with backends hosted elsewhere.
To find which version of NGINX the current Staticfile buildpack uses, see the [Staticfile buildpack release notes](https://github.com/cloudfoundry/staticfile-buildpack/releases).

### <a id='staticfile'></a>Staticfile Detection

If you create a file named `Staticfile` and locate it in the build directory of your app, Cloud Foundry automatically
uses the Staticfile buildpack when you push your app.

The `Staticfile` file can be an empty file, or it can contain configuration settings for your app.
For more information,
see [Configuring the Buildpack](#configure) and [Pushing an App](#push_app).

### <a id='memory'></a>Memory Usage

NGINX requires 20&nbsp;MB of RAM to serve static assets.
When using the Staticfile buildpack, we recommend pushing apps with the `-m 64M` option to reduce RAM allocation from the default 1&nbsp;GB allocated to containers by default.

## <a id='configure'></a>Configure the Buildpack

This section describes configuration options available for the Staticfile buildpack. If you need to make configuration changes to NGINX
that are not listed in the table below, use the NGINX Buildpack instead of the Staticfile buildpack. For more information, see <a href="../nginx/index.html">NGINX Buildpack</a>.

### <a id='staticfile'></a>Staticfile File Configuration

To configure these options, add the configuration property as a new line in your `Staticfile` file
as described in the following table.

<table border='1' class='nice'>
  <tr>
    <th width="35%">Staticfile Configuration Property</th>
    <th>Description</th>
  </tr>
  <tr>
    <td id="root">
      <code>root: YOUR-DIRECTORY-NAME</code><br><br>
      Example:<br>
      <code>root: public</code>
    </td>
    <td><strong>Alternative root</strong>: Specifies a root directory other than the default. Use
      this option to serve <code>index.html</code> and other assets, such as HTML, CSS, or
      JavaScript files, from a location other than the root directory.<br><br>
      For example, you can specify an alternate folder such as <code>dist</code> or
      <code>public</code>.
    </td>
  </tr>
  <tr>
    <td id="dir-list">
      <code>directory: visible</code>
    </td>
    <td><strong>Directory list</strong>: Displays an HTML page that shows a directory index for
      your site. A sample of a directory list is shown below.<br>
      <img src="../images/directory-index.png" alt="directory index" style="margin: 20px"><br>
      If your site is missing an <code>index.html</code> file, your app displays a directory list
      instead of the standard 404 error page.
    </td>
  </tr>
  <tr>
    <td id="ssi">
      <code>ssi: enabled</code>
    </td>
    <td><strong>SSI</strong>: Enables Server Side Includes (SSI), which allow you to embed the
      contents of one or more files into a web page on a web server. For general information about
      SSI, see the <a href="https://en.wikipedia.org/wiki/Server_Side_Includes">Server Side
      Includes</a> entry on Wikipedia.
    </td>
  </tr>
  <tr>
    <td id="pushstate">
      <code>pushstate: enabled</code>
    </td>
    <td><strong>Pushstate routing</strong>: Keeps browser-visible URLs clean for client-side
      JavaScript apps that serve multiple routes. For example, pushstate routing allows a single
      JavaScript file to route to multiple anchor-tagged URLs that look like
      <code>/some/path1</code> instead of <code>/some#path1</code>.
    </td>
  </tr>
  <tr>
    <td id="gzip">
      <code>gzip: off</code>
    </td>
    <td><strong>GZip file serving and compression</strong>: Disables
      <a href="http://nginx.org/en/docs/http/ngx_http_gzip_static_module.html">gzip_static</a>
      and <a href="http://nginx.org/en/docs/http/ngx_http_gunzip_module.html">gunzip</a> modules,
      which are enabled by default. These modules allow NGINX to serve files stored in compressed
      GZ format and to uncompress them for clients that do not support compressed content or
      responses.<br><br>
      You may want to disable compression under particular circumstances such as serving content to
      very old browser clients.
    </td>
  </tr>
  <tr>
    <td id="proxy-support">
      <code>http_proxy: HTTP-URL</code><br>
      <code>https_proxy: HTTPS-URL</code><br><br>
      Example:<br>
      <code>http_proxy: http://www.example.com/</code><br>
      <code>https_proxy: https://www.example.com/</code>
    </td>
    <td><strong>Proxy support</strong>: Allows you to use a proxy when downloading dependencies during the staging of your app.
    </td>
  </tr>
  <tr>
    <td id="force-https">
      <code>force_https: true</code><br><br>
      Alternatively, set the <code>FORCE_HTTPS</code> environment variable to <code>true</code>.
    </td>
    <td><strong>Force HTTPS</strong>: Forces all requests to be sent through HTTPS. This redirects
      non-HTTPS requests as HTTPS requests.
      <p class="note"><strong>Note</strong>: Do not enable <code>FORCE_HTTPS</code> if you have a
      proxy server or load balancer that terminates SSL/TLS. Doing so can cause infinite redirect
      loops, for example, if you use
      <a href="https://support.cloudflare.com/hc/en-us/articles/200170416">Flexible SSL</a> with
      CloudFlare.</p>
    </td>
  </tr>
  <tr>
    <td id="host-dot-files">
      <code>host_dot_files: true</code>
    </td>
    <td><strong>Dot files</strong>: By default, hidden files, which are those starting with a
      <code>.</code>, are not served by this buildpack.
    </td>
  </tr>
  <tr>
    <td id="status-codes">
    <code>status_codes: </code> <br>
    <code>&nbsp;&nbsp;404: /404.html</code><br>
    <code>&nbsp;&nbsp;500: /500.html</code>
    </td>
    <td><strong>Status Codes</strong>: Allows to define custom pages for HTTP STATUS codes instead of the default NGINX pages.</td>
  </tr>
  <tr>
    <td id="strict-security">
      <code>http_strict_transport_security: true</code>
    </td>
    <td><strong>HTTP Strict Transport Security (HSTS)</strong>: Causes NGINX to respond to all
      requests with the header <code>Strict-Transport-Security: max-age=31536000</code>. This
      forces receiving browsers to make all subsequent requests over HTTPS. This setting defaults
      to a <code>max-age</code> of one year.
      <p class="note"><strong>Note</strong>: Because this setting persists in browsers for a long
      time, only enable this setting after you ensure that you have completed your app
      configuration.</p>
    </td>
  </tr>
  <tr>
    <td id="strict-security-with-subdomains">
      <code>http_strict_transport_security_include_subdomains: true</code>
    </td>
    <td><strong>HSTS includes subdomains</strong>: Causes NGINX to respond to all requests with the
      following header:
      <code>Strict-Transport-Security: max-age=31536000; includeSubDomains</code><br>
      This forces browsers to make all subsequent requests over HTTPS including subdomains. This
      setting defaults to a <code>max-age</code> of one year.
      <p class="note"><strong>Note</strong>: Setting this property to <code>true</code> also makes
      <code>http_strict_transport_security</code> default to true.</p>
    </td>
  </tr>
  <tr>
    <td id="strict-security-with-preload">
      <code>http_strict_transport_security_preload: true</code>
    </td>
    <td><strong>HSTS preload</strong>: Causes NGINX to respond to all requests with the following
      header:
      <code>Strict-Transport-Security: max-age=31536000; includeSubDomains; preload</code><br>
      This forces browsers to make all subsequent requests over HTTPS including subdomains and
      requests inclusion in browser-managed HSTS preload lists. For more information, see
		<a href="https://hstspreload.org">https://hstspreload.org</a>. This setting defaults to a
      <code>max-age</code> of one year. This setting defaults to a <code>max-age</code> of one
      year.
      <p class="note"><strong>Note</strong>: Setting this property to <code>true</code> also makes
      <code>http_strict_transport_security</code> and
      <code>http_strict_transport_security_include_subdomains</code> default to true.</p>
    </td>
  </tr>
</table>

### <a id='staticfile'></a>Other Configuration

Follow the instructions below to make other configuration changes.

<hr>

####<a name="basic-authentication"></a>Basic Authentication

Allows you to enable basic authentication for your app or website. A sample basic authentication
dialog box is shown below:

<img src="../images/basicauth.png">

You can create a hashed username and password pair for each user by using a site like
<a href="http://www.htaccesstools.com/htpasswd-generator/">Htpasswd Generator</a>.

**Configuration**

Add a new <code>Staticfile.auth</code> file to the root or alternative root directory. In the new
file, add one or more username and password entries using the following format:
<code>USERNAME:HASHED_PASSWORD</code>

Example:

```
pat:$example1$DuUQEQp8$ZccZCHQElNSjrgerwSFC0
stevie:$example1$22derfaecZSJJRw4rKE$KKEWKSK
```
<hr>

####<a name="custom-location"></a>Custom Location

Allows you to specify custom location definitions with additional directives. For information about
NGINX directives, see [Creating NGINX Plus and NGINX Configuration Files](https://docs.nginx.com/nginx/admin-guide/basic-functionality/managing-configuration-files)
and [Alphabetical index of directives](https://nginx.org/en/docs/dirindex.html) in the
_NGINX documentation_.

**Configuration**

To customize the `location` block of the NGINX configuration file, follow the steps below.

1. Set an alternative `root` directory. The `location_include` property only works in conjunction
with an alternative `root`.

1. Create a file with location-scoped NGINX directives. See the following example, which causes
visitors of your site to receive the `X-MySiteName` HTTP header:
    * **File**:
      `nginx/conf/includes/custom_header.conf`
    * **Content**:
      `add_header X-MySiteName BestSiteEver;`

1. Set the `location_include` variable in your **Staticfile** to the path of the file from the
previous step. This path is relative to `nginx/conf`.

	 Example:

	 ```
    ...
    root: public
    location_include: includes/*.conf
    ...
    ```

<hr>

####<a name="basic-authentication"></a>Additional MIME Type Support

Allows you to configure additional MIME types on your NGINX server.

**Configuration**

To add MIME types, add a `mime.types` file to your root folder, or to the alternate root folder if
you specified one.

For more information about the `mime.types` file, see [mime.types](https://www.nginx.com/resources/wiki/start/topics/examples/full/#mime-types") in the
_NGINX documentation_.

Example MIME types file:

```
types {
    text/html     html htm shtml;
    text/css      css;
    text/xml      xml rss;
    image/gif     gif;
    ...
    }
```

<hr>

## <a id='push_app'></a> Push an App

To push your app, you can use either the system Staticfile buildpack or specify a Staticfile buildpack.

### Option 1: Use the System Staticfile Buildpack

To use the Staticfile buildpack installed in your deployment, run the command below in the root directory of the app.
The root directory of the app must contain a file named `Staticfile`.

```
cf push APP-NAME
```
Where <code>APP-NAME</code> is the name you want to give your app.

For example:

<pre class='terminal'>
$ cf push my-app
Creating app my-app in org sample-org / space sample-space as username<span>@</span>example.com...
OK
...
requested state: started
instances: 1/1
usage: 1G x 1 instances
urls: my-app.example.com
last uploaded: Wed Apr 1 12:55:41 UTC 2020
stack: cflinuxfs3
buildpack: staticfile

     state     since                    cpu    memory        disk         details
#0   running   2020-04-01 12:55:57 PM   0.0%   12.6M of 1G   5.9M of 1G
</pre>

### Option 2: Specify a Staticfile Buildpack

To explicitly specify a Staticfile buildpack, run the command below
in the root directory of the app. You may want to specify a buildpack if your
deployment does not have the Staticfile buildpack installed or the installed
version is outdated.

```
cf push APP-NAME -b BUILDPACK-NAME-OR-PATH
```
Where:

  * `APP-NAME` is the name you want to give your app.
  * `BUILDPACK-NAME-OR-PATH` is either the name of a buildpack that is installed in your deployment or the path to
  a buildpack. You can find the Cloud Foundry Staticfile buildpack in the [Staticfile repository](https://github.com/cloudfoundry/staticfile-buildpack.git)
  on GitHub.

For example:

<pre class='terminal'>
$ cf push my-app -b https://github.com/cloudfoundry/staticfile-buildpack.git
Creating app my-app in org sample-org / space sample-space as username<span>@</span>example.com...
OK
...
requested state: started
instances: 1/1
usage: 1G x 1 instances
urls: my-app.example.com
last uploaded: Wed Apr 1 12:55:41 UTC 2020
stack: cflinuxfs3
buildpack: https://github.com/cloudfoundry/staticfile-buildpack.git

     state     since                    cpu    memory        disk         details
#0   running   2020-04-01 12:55:57 PM   0.0%   12.6M of 1G   5.9M of 1G
</pre>

### Verifying the Push

After you push the app, follow the steps below to verify that the push was successful:

1. Find the URL of your app in the output of the `cf push` command.
For example, the URL in the terminal output above is `my-app.example.com`.

1. In a browser, navigate to the URL to view your app.

## <a id='examples'></a>Example Staticfile Buildpack Apps

For different examples of apps that use the Staticfile buildpack, see the [fixtures](https://github.com/cloudfoundry/staticfile-buildpack/tree/master/fixtures) directory in the Staticfile buildpack GitHub repo.

## <a id='help'></a>Help and Support

A number of channels exist where you can get more help when using the Staticfile buildpack, or with developing your own Staticfile buildpack.

* **Staticfile Buildpack Repository in GitHub**: Find more information about using and extending the Staticfile buildpack in [GitHub repository](https://github.com/cloudfoundry/staticfile-buildpack).

* **Release Notes**: Find current information about this buildpack on the Staticfile buildpack [release page](https://github.com/cloudfoundry/staticfile-buildpack/releases) in GitHub.

* **Slack**: Join the #buildpacks channel in the [Cloud Foundry Slack community](http://slack.cloudfoundry.org/).


