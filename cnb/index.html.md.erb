---
title: Cloud Native Buildpacks
owner: Buildpacks
---

Cloud Native Buildpacks (CNBs) usually take your application source code and transform it into a container. If you are familiar with their concepts, there are some differences:

- During build, instead of a container image, a droplet is produced. However, this should go unnoticed by the end user.
- Using the new `lifecycle` property is currently only possible using a manifest.
- Build- and run environment/image will be provided by the Cloud Foundry stack available on your platform (probably [cflinuxfs4](https://github.com/cloudfoundry/cflinuxfs4)).
- Using stacks provided by Paketo is not possible at the moment.
- Software Bill of Material (SBOM) is missing operating system packages and is not directly accessible.

## <a id='cnb-example'></a> Push an app

- [Sample Node.js app](https://github.com/cloudfoundry-samples/cf-sample-app-nodejs)

While this sample is shipped with using Classic Buildpacks, it can be easily build with CNBs by replacing `manifest.yaml`:

```yaml
---
applications:
- name: cf-nodejs
  lifecycle: cnb
  buildpacks:
  - docker://gcr.io/paketo-buildpacks/nodejs
  memory: 512M
  instances: 1
  random-route: true
```

Using the `lifecycle` property, the desired Buildpack variant can be selected. See the [reference section](../../devguide/deploy-apps/manifest-attributes.html#lifecycle) for more details. In this example, the [nodejs CNB](https://github.com/paketo-buildpacks/nodejs) container image is selected.

### <a id='cnb-example-system-buildpack'></a> System Cloud Native Buildpacks

If system Cloud Native Buildpacks are installed and a buildpack for your app is not specified, Cloud Foundry will attempt to detect a suitable buildpack, similar to Classic Buildpacks. Otherwise, the particular CNBs you'd like to use can be specified by name:

```yaml
---
applications:
- name: cf-nodejs
  lifecycle: cnb
  buildpacks:
  - node_buildpack
  memory: 512M
  instances: 1
  random-route: true
```

### <a id='cnb-example-credentials'></a> Private Cloud Native Buildpacks

<p class="note">
You must use cf CLI v8.9.0 or later.
</p>

Cloud Native Buildpacks can be consumed from private registries, by using the `CF_CNB_REGISTRY_CREDS` environment variable, in two different ways: Username and password combination or a token:

```bash
export CF_CNB_REGISTRY_CREDS='{"<registry>": {"username":"<username>", "password":"<password>"}}'
export CF_CNB_REGISTRY_CREDS='{"<registry>": {"token":"<token>"}}'
```

Example:

```yaml
---
applications:
- name: cf-nodejs
  lifecycle: cnb
  buildpacks:
  - docker://my-registry-a.corp/nodejs
  - docker://my-registry-b.corp/dynatrace
  memory: 512M
  instances: 1
  random-route: true
```

```bash
export CF_CNB_REGISTRY_CREDS='{"my-registry-a.corp": {"token":"aaaaaa"}, "my-registry-b.corp": {"token":"bbbbbb"}}'
cf push
```
