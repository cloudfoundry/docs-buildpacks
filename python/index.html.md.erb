---
title: Python Buildpack
owner: Buildpacks
---

<strong><%= modified_date %></strong>

## <a id='pushing_apps'></a>Push an App ##

This buildpack will be automatically used if there is a `requirements.txt` or `setup.py` file in the root directory of your project.

If your Cloud Foundry deployment does not have the Python Buildpack installed, or the installed version is out of date, you can use the latest version by specifying it with the `-b` option when you push your app. For example:

<pre class="terminal">
$ cf push my_app -b https://github.com/cloudfoundry/buildpack-python.git
</pre>

## <a id='supported_versions'></a>Supported Versions ##

You can find the list of supported Python versions in the [Python buildpack release notes](https://github.com/cloudfoundry/python-buildpack/releases).

## <a id='runtime'></a>Specify a Python Version ##

You can specify a version of the Python runtime by including it within a `runtime.txt` file. For example:

<pre class="terminal">
$ cat runtime.txt
python-3.5.2
</pre>

The buildpack only supports the stable Python versions, which are listed in the `manifest.yml` and [Python buildpack release notes](https://github.com/cloudfoundry/python-buildpack/releases).

If you try to use a binary that is not currently supported, staging your app fails and you see the following error message:

<pre class="terminal">
Could not get translated url, exited with: DEPENDENCY_MISSING_IN_MANIFEST: ...
 !
 !     exit
 !
Staging failed: Buildpack compilation step failed
</pre>

## <a id='start-command'></a>Specify a Start Command ##

The Python buildpack does not generate a [default start command](../../devguide/deploy-apps/start-restart-restage.html#first-time) for your applications.

To stage with the Python buildpack and start an application, do one of the following:

- <%= vars.python_cf245only %> Supply a Procfile. For more information about Procfiles, see the [Configuring a Production Server](../prod-server.html) topic. The following example Procfile specifies `gunicorn` as the start command for a web app running on Gunicorn:

    ```
    web: gunicorn SERVER-NAME:APP-NAME
    ```

- Specify a start command with `-c`. The following example specifies `waitress-serve` as the start command for a web app running on Waitress:

    <pre class="terminal">
    $ cf push python-app -c "waitress-serve --port=$PORT DJANGO-WEB-APP.wsgi:MY-APP"
    </pre>

- Specify a start command in the application manifest by setting the `command` attribute. For more information, see the [Deploying with Application Manifests](../../devguide/deploy-apps/manifest.html#start-commands) topic. 

## <a id='vendoring'></a>Vendor App Dependencies ##

If you are deploying in an environment that is disconnected from the Internet, your application [must vendor its dependencies](https://github.com/cf-buildpacks/buildpack-packager/blob/master/doc/disconnected_environments.md).

For the Python buildpack, use `pip`:

<pre class="terminal">
$ cd YOUR-APP-DIR
$ mkdir -p vendor

# vendors all the pip *.tar.gz into vendor/
$ pip install --download vendor -r requirements.txt
</pre>

`cf push` uploads your vendored dependencies. The buildpack installs them directly from the `vendor/` directory.

## <a id='cfenv'></a>Parse Environment Variables ##

The `cfenv` package provides access to Cloud Foundry application environment settings by parsing all the relevant environment variables. The settings are returned as a class instance. See [https://github.com/jmcarp/py-cfenv](https://github.com/jmcarp/py-cfenv) for more information.

## <a id='miniconda'></a>Miniconda Support <span style="font-size:1rem">(starting in buildpack version <a href="https://github.com/cloudfoundry/python-buildpack/releases/tag/v1.5.6">1.5.6</a>)</span>##

To use miniconda instead of pip for installing dependencies, place an `environment.yml` file in the root directory.

For examples, see our sample apps [using Python 2 with miniconda](https://github.com/cloudfoundry/python-buildpack/tree/master/fixtures/miniconda_python_2) and [using Python 3 with miniconda](https://github.com/cloudfoundry/python-buildpack/tree/master/fixtures/miniconda_python_3).

## <a id='proxy_support'></a> Proxy Support ##

If you need to use a proxy to download dependencies during staging, you can set
the `http_proxy` and `https_proxy` environment variables. For more information, see the [Proxy Usage Documentation](http://docs.cloudfoundry.org/buildpacks/proxy-usage.html).

## <a id='bosh_trusted_cert'></a>BOSH Configured Custom Trusted Certificate Support ##

Versions of Python 2.7.9 and later use certificates stored in `/etc/ssl/certs`. Your platform operator can configure the platform to [add the custom certificates into the application container](https://docs.cloudfoundry.org/adminguide/trusted-system-certificates.html).

## <a id='help_support'></a>Help and Support ##

Join the #buildpacks channel in our [Slack community] (http://slack.cloudfoundry.org/) if you need any further assistance.

For more information about using and extending the Python buildpack in Cloud Foundry, see the [python-buildpack GitHub repository](https://github.com/cloudfoundry/python-buildpack).

You can find current information about this buildpack on the [Python buildpack
release page](https://github.com/cloudfoundry/python-buildpack/releases) in GitHub.
